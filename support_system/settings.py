"""
Django settings for support_system project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from common.env import Env
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-&**q==jwjqna^*w^@rfxy315jd(p41#29j@h2&kjv_l$(bciej'

# SECURITY WARNING: don't run with debug turned on in production!
ENV: str = Env.get("ENV", "dev").to_str()

DEBUG = Env.get("DEBUG", "true").to_bool()

if(ENV == "dev"):
    DEBUG = True

if(DEBUG):
    SECRET_KEY = Env.get("SECRET_KEY", "django-insecure-&**q==jwjqna^*w^@rfxy315jd(p41#29j@h2&kjv_l$(bciej").to_str()
else:
    SECRET_KEY = Env.get("SECRET_KEY").required().to_str()

ALLOWED_HOSTS = Env.get("ALLOWED_HOSTS", "127.0.0.1,localhost").to_list(separator=",")
CSRF_TRUSTED_ORIGINS = Env.get("CSRF_TRUSTED_ORIGINS", "http://127.0.0.1:8000,http://localhost:8000").to_list(separator=",")

# Application definition
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'tickets',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'support_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'support_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DB_ENGINE: str = Env.get("DB_ENGINE", "sqlite3").to_str()
DB_NAME: str = Env.get("DB_NAME", BASE_DIR / "db.sqlite3").to_str()
DB_USER: str = Env.get("DB_USER").to_str()
DB_PASSWORD: str = Env.get("DB_PASSWORD").to_str()
DB_HOST: str = Env.get("DB_HOST", "127.0.0.1").to_str()
DB_PORT: str = Env.get("DB_PORT").to_int()

db_config = {
    'ENGINE': f'django.db.backends.{DB_ENGINE}',
    'NAME': DB_NAME,
    "USER": DB_USER,
    "PASSWORD": DB_PASSWORD,
    "HOST": DB_HOST,
    "PORT": DB_PORT,
}
# delete None values
db_config = {k: v for k, v in db_config.items() if v is not None}

DATABASES = {
    'default': db_config
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = Env.get("STATIC_URL", "static/").to_str()

# STATIC_ROOT = BASE_DIR / 'staticfiles'
STATIC_ROOT = Env.get("STATIC_ROOT", BASE_DIR / "staticfiles").to_str()

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
